Empezando ejercicio.

Empezando el proyecto voy a aprender y utilizar Flask, porque en comparacion a Django y FastAPI es mas simple y rapido y debo hacer esta feature lo antes posible. De haber tenido mas tiempo disponible seguramente hubiese intentado hacerlo con FastAPI. Django tiene mas features y en un futuro tendre que aprenderlo pero no es el momento

Flask no es asyncronic. FastAPI es asyncrono y high performance. Tiene todo basicamente, validacion de datos y documentacion automatica con AI, utilizable para highperformance y escalabilidad. Django es lento pero util para apps grandes de muchas features te ahorra tons of time, ademas tiene ORL (object relational mapping).

Flask tiene autenticacion, importante para ver si puedo hacer basic auth.

No voy a usar entorno virtual por una feature de un test, pero para aplicar en futuro virtual environment.
Para crear environment en la carpeta del proyecto crear .venv


Ya en produccion:
    If another program is already using port 5000, you’ll see OSError: [Errno 98] or OSError: [WinError 10013] when the server tries to start. See Address already in use for how to handle that.




#Datos:
    f-string significa "formatted string" y no "function string".
    Es una característica de Python que permite incluir variables y expresiones directamente dentro de una cadena de texto utilizando {}.

    
#Metodos necesarios y/o utiles:

    Por ejemplo, el método upper toma una cadena y devuelve una nueva cadena con
    todas las letras en mayúscula:
    En vez de la sintaxis de función upper(word), éste utiliza la sintaxis de método
    word.upper().
    >>> palabra = 'banana'
    >>> nueva_palabra = palabra.upper()
    >>> print(nueva_palabra)
    BANANA

    Una tarea común es eliminar los espacios en blanco (espacios, tabs, o nuevas líneas)
    en el inicio y el final de una cadena usando el método strip:
    >>> linea = ' Aquí vamos '
    >>> linea.strip()
    'Aquí vamos'

    Algunos métodos como startswith devuelven valores booleanos.
    >>> linea = 'Que tengas un buen día'
    >>> linea.startswith('Que')
    True
    >>> linea.startswith('q')
    False
    Puedes notar que startswith requiere que el formato (mayúsculas y minúsculas)
    coincida, de modo que a veces tendremos que tomar la línea y cambiarla completamente a minúsculas antes de hacer la verificación, utilizando el método lower.
    >>> linea = 'Que tengas un buen día'
    >>> linea.startswith('q')
    False
    >>> linea.lower()
    'que tengas un buen día'
    >>> linea.lower().startswith('q')
    True

    Ejercicio 5: Toma el siguiente código en Python que almacena una cadena:
    str = 'X-DSPAM-Confidence:0.8475'
    Utiliza find y una parte de la cadena para extraer la porción de la cadena
    después del carácter dos puntos y después utiliza la función float para
    convertir la cadena extraída en un número de punto flotante.
    80 CHAPTER 6. CADENAS
    Ejercicio 6: Lee la documentación de los métodos de cadenas en
    https://docs.python.org/library/stdtypes.html#string-methods Quizá
    quieras experimentar con algunos de ellos para asegurarte de entender
    como funcionan. strip y replace son particularmente útiles.
    La documentación usa una sintaxis que puede ser confusa. Por ejemplo, en find(sub[, start[, end]]), los corchetes indican argumentos opcionales. De modo que sub es requerido, pero start es opcional, y si se
    incluye start, entonces end es opcional.

    


